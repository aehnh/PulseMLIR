/* Autogenerated by mlir-tblgen; don't manually edit */
#ifdef GEN_PASS_CLASSES

//===----------------------------------------------------------------------===//
// QASMToPulsePass
//===----------------------------------------------------------------------===//

template <typename DerivedT>
class QASMToPulsePassBase : public ::mlir::OperationPass<ModuleOp> {
public:
  using Base = QASMToPulsePassBase;

  QASMToPulsePassBase() : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}
  QASMToPulsePassBase(const QASMToPulsePassBase &) : ::mlir::OperationPass<ModuleOp>(::mlir::TypeID::get<DerivedT>()) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-qasm-to-pulse");
  }
  ::llvm::StringRef getArgument() const override { return "convert-qasm-to-pulse"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("QASMToPulsePass");
  }
  ::llvm::StringRef getName() const override { return "QASMToPulsePass"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  registry.insert<QASM::QASMDialect>();

  registry.insert<pulse::PulseDialect>();

  registry.insert<StandardOpsDialect>();

  registry.insert<AffineDialect>();

  registry.insert<scf::SCFDialect>();

  }

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// QASMToPulsePass Registration
//===----------------------------------------------------------------------===//

inline void registerQASMToPulsePassPass() {
  ::mlir::registerPass("convert-qasm-to-pulse", "Convert QASM dialect to pulse dialect", []() -> std::unique_ptr<::mlir::Pass> {
    return mlir::createQASMToPulsePass();
  });
}

//===----------------------------------------------------------------------===//
//  Registration
//===----------------------------------------------------------------------===//

inline void registerPasses() {
  registerQASMToPulsePassPass();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
